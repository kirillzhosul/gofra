
// ==============================================
// Complex example of using FFI-library (Raylib, C) as an graphics wrapper
// Opens an window with a 2D-square which is can be moved with WASD.
//
// Requires additional CLI toolchain flags to link with raylib
// MacOS: `-L=-lraylib -L=-L/opt/homebrew/lib`
// ==============================================

#include "ext/raylib.gof"
#include "std.gof"
#include "_cpu.gof"

memory player_x CPU_WORD
memory player_y CPU_WORD

#define BACKGROUND_COLOR 0xFFFFFFFF

#define PLAYER_COLOR 0xFF0000FF
#define PLAYER_SIZE  64
#define PLAYER_SPEED 5

#define WINDOW_NAME   "Welcome to Gofra!"
#define WINDOW_WIDTH  512
#define WINDOW_HEIGHT 512  
#define WINDOW_FPS    120

// Draws an player where it is located
func void draw_player[]
    player_x ?>
    player_y ?>
    PLAYER_SIZE 
    PLAYER_SIZE
    PLAYER_COLOR
    call DrawRectangle
end

// Handles player movement
func void update_player
    'W' call IsKeyDown if
        player_y copy ?> PLAYER_SPEED - !<
    end
    'S' call IsKeyDown if
        player_y copy ?> PLAYER_SPEED + !<
    end 
    'A' call IsKeyDown if
        player_x copy ?> PLAYER_SPEED - !<
    end 
    'D' call IsKeyDown if
        player_x copy ?> PLAYER_SPEED + !<
    end
end

// Initialize all memory and entities before startup
func void init_scene
    // Player at the center
    player_x WINDOW_WIDTH  2 / PLAYER_SIZE - !<
    player_y WINDOW_HEIGHT 2 / PLAYER_SIZE - !<
end

// Init window with Raylib
func void init_window[]
    WINDOW_WIDTH
    WINDOW_HEIGHT 
    WINDOW_NAME to_cstr_ptr 
    call InitWindow

    WINDOW_FPS
    call SetTargetFPS
end

// Close window and exit
func void exit_game
    CloseWindow
    0 exit
end

func void main[]
    call init_scene
    call init_window

    while 
        WindowShouldClose false ==
    do 
        BeginDrawing
            call draw_player

            BACKGROUND_COLOR
            call ClearBackground

            call update_player
        EndDrawing
    end

    exit_game
end