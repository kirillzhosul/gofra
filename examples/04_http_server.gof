
// ==============================================
// HTTP server complex example
// Open an HTTP server on localhost that responds with simple HTML page
// ==============================================

#include "std.gof"
#include "os/network.gof"
#include "http"

#define HTTP_IO_BUFFER_CAP 4096

var buffer char[HTTP_IO_BUFFER_CAP]
var server HTTPServer
var request HTTPIncomingRequest

func void pack_sockaddr[]
    server.net_addr
        AF_INET 48 <<  // sin_family highest bit -> little endian
        0x1F90   32 << // sin_port 
        | 0x7F000001 | // sin_addr
    !<

    // zero padding by default but add `addr.sin_zero 0 !<` after fix
end

func void handle_request[]
    "Got connection!" println

    // Read request
    request call http_server_read_request
    "Bytes read: " print print_integer

    // Send response
    request 
    "<h1>Hello from Gofra HTTP server!</h1><i>Built with Gofra and native HTTP library</i>" to_cstr_ptr
    call http_server_send_html_response
    "Bytes written: " print print_integer

    // Finish request
    request call http_server_close_request
    "Closed connection!\n" print
end

func void main[]
    server.port 8080 !< // todo: not used
    server.backlog 5 !<

    call pack_sockaddr
    server call http_server_start

    "Listening...\n" print

    while true do
        request.socket
            server.socket ?> 
        call net_accept_sink !<
 
        request.socket ?> -1 == if
            "Unable to accept to client socket on HTTP server socket\n" eprint_fatal
        end

        call handle_request
    end
end