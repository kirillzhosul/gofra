// ==============================================
// Complex example of an pong game
//
// Requires additional CLI toolchain flags to link with raylib
// MacOS: `-lraylib`
// ==============================================

#include "ext/raylib.gof"
#include "std.gof"

#define BALL_COLOR WHITE
#define BALL_SIZE  20
#define BALL_SPEED 3
var ball_speed_x int
var ball_speed_y int

var ball_x int
var ball_y int

var player_score int
var enemy_score int

#define DEFAULT_DIFFICULTY 30
var difficulty int

#define PADDLE_DEFAULT_SPEED 3
#define PADDLE_WIDTH 25
#define PADDLE_HEIGHT 120
var paddle_player_speed int
var paddle_player_x int
var paddle_player_y int
var paddle_enemy_speed int
var paddle_enemy_x int
var paddle_enemy_y int

#define WINDOW_NAME   "Gofra Pong"
#define WINDOW_WIDTH  1200
#define WINDOW_HEIGHT 800
#define WINDOW_FPS    120

#define FONT_SIZE 80
#define BACKGROUND_COLOR BLACK

var enemy_score_str  char[32]
var player_score_str char[32]

inline func void update_ball_movement[]
    ball_x copy ?> ball_speed_x ?> + !<
    ball_y copy ?> ball_speed_y ?> + !<
end

inline func void finalize_game[]
    CloseWindow
    0 exit
end

inline func void increase_score[*int]
    copy ?> 1 + !<

    difficulty copy ?> 1 + !<
end

inline func void inverse_speed[*int]
    copy ?> 0 1 - * !<
end

func void update_difficulty[]
    ball_speed_x BALL_SPEED difficulty ?> + !<
    ball_speed_y BALL_SPEED difficulty ?> + !<

    paddle_enemy_speed PADDLE_DEFAULT_SPEED 2 / difficulty ?> + !<
end

func void init_game[]
    ball_x WINDOW_WIDTH  2 / BALL_SIZE - !<
    ball_y WINDOW_HEIGHT 2 / BALL_SIZE - !<

    player_score 0 !<
    enemy_score  0 !<

    ball_speed_x BALL_SPEED !<
    ball_speed_y BALL_SPEED !<

    paddle_player_x WINDOW_WIDTH PADDLE_WIDTH - 10 - !<
    paddle_player_y WINDOW_HEIGHT 2 / PADDLE_HEIGHT 2 / - !<
    paddle_player_speed PADDLE_DEFAULT_SPEED !<

    paddle_enemy_x 10 !<
    paddle_enemy_y WINDOW_HEIGHT 2 / PADDLE_HEIGHT 2 / - !<
    paddle_enemy_speed PADDLE_DEFAULT_SPEED !<

    difficulty DEFAULT_DIFFICULTY !<
    call update_difficulty
end

func void init_raylib[]
     WINDOW_WIDTH
     WINDOW_HEIGHT
     WINDOW_NAME to_cstr_ptr
    InitWindow

     WINDOW_FPS
    call SetTargetFPS
end

func void draw_game[]
     BACKGROUND_COLOR
    call ClearBackground

     enemy_score_str
     WINDOW_WIDTH 4 / 20 -
     20
     FONT_SIZE 
     WHITE
    call DrawText

     player_score_str
     WINDOW_WIDTH 4 / 20 - 3 *
     20
     FONT_SIZE 
     WHITE
    call DrawText

     WINDOW_WIDTH 2 / 
     0
     WINDOW_WIDTH 2 /
     WINDOW_HEIGHT
     WHITE
    call DrawLine

     ball_x ?> BALL_SIZE 2 / +
     ball_y ?> BALL_SIZE 2 / +
     BALL_SIZE
     BALL_SIZE
     BALL_COLOR
    call DrawRectangle

     paddle_player_x ?>
     paddle_player_y ?>
     PADDLE_WIDTH
     PADDLE_HEIGHT
     WHITE
    call DrawRectangle

     paddle_enemy_x ?>
     paddle_enemy_y ?>
     PADDLE_WIDTH
     PADDLE_HEIGHT
     WHITE
    call DrawRectangle

    0 0 call DrawFPS
end

func void handle_enemy_ai[]
    // Try to move to ball position
    paddle_enemy_y ?> ball_y ?> > if
        paddle_enemy_y copy ?> paddle_enemy_speed ?> - !<
    end

    paddle_enemy_y ?> ball_y ?> < if
        paddle_enemy_y copy ?> paddle_enemy_speed ?> + !<
    end

    // Boundaries for enemy paddle
    paddle_enemy_y ?> 0 < if
        paddle_enemy_y 0 !<
    end
    paddle_enemy_y ?> PADDLE_HEIGHT + WINDOW_HEIGHT > if
        paddle_enemy_y WINDOW_HEIGHT PADDLE_HEIGHT - !<
    end
end

func void handle_player_movement[]
    // Movement of an player paddle
    'W' IsKeyDown if
        paddle_player_y copy ?> paddle_player_speed ?> - !<
    end
    'S' IsKeyDown if
        paddle_player_y copy ?> paddle_player_speed ?> + !<
    end

    // Boundaries for player paddle
    paddle_player_y ?> 0 < if
        paddle_player_y 0 !<
    end
    
    paddle_player_y ?> PADDLE_HEIGHT + WINDOW_HEIGHT > if
        paddle_player_y WINDOW_HEIGHT PADDLE_HEIGHT - !<
    end
end

func void handle_ball_paddle_bounce[]
    ball_x ?> paddle_player_x ?> PADDLE_WIDTH - >= 
    ball_y ?> paddle_player_y ?> >=
    ball_y ?> paddle_player_y ?> PADDLE_HEIGHT + <= 
    && && if
        ball_speed_x call inverse_speed
        ball_speed_y call inverse_speed
    end

    ball_x ?> paddle_enemy_x ?> PADDLE_WIDTH + <=
    ball_y ?> paddle_enemy_y ?> >=
    ball_y ?> paddle_enemy_y ?> PADDLE_HEIGHT + <=
    && && if
        ball_speed_x call inverse_speed
        ball_speed_y call inverse_speed
    end
end

func void handle_ball_wall_bounce[]
    ball_x ?> BALL_SIZE 2 * + WINDOW_WIDTH >= if 
        // Bounce of right corner
        enemy_score call increase_score
        ball_speed_x call inverse_speed
    end

    ball_y ?> BALL_SIZE 2 * + WINDOW_HEIGHT >= if 
        // Bounce of bottom corner
        ball_speed_y call inverse_speed
    end
    ball_y ?> 0 <= if 
        // Bounce of top corner
        ball_speed_y call inverse_speed
    end

    ball_x ?> 0 <= if 
        // Bounce of left corner
        player_score call increase_score
        ball_speed_x call inverse_speed
    end
end

func void update_user_interface[]
    enemy_score ?> enemy_score_str call int2str
    player_score ?> player_score_str call int2str
end

func void game_loop[]
    call draw_game
    call handle_player_movement
    call handle_enemy_ai
    call update_ball_movement
    call handle_ball_wall_bounce
    call handle_ball_paddle_bounce
    call update_user_interface
end

func void main[]
    call init_game
    call init_raylib

    while call WindowShouldClose true != do 
        call BeginDrawing
        call game_loop
        call EndDrawing 
    end

    call finalize_game
end