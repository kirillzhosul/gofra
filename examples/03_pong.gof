// ==============================================
// Complex example of an pong game
//
// Requires additional CLI toolchain flags to link with raylib
// MacOS: `-lraylib`
// ==============================================

#include "ext/raylib.gof"
#include "std.gof"

#define PADDLE_DEFAULT_SPEED 3
#define PADDLE_WIDTH 25
#define PADDLE_HEIGHT 120
struct Paddle
    speed int
    score int
    x int y int
end

var player Paddle
var enemy  Paddle

#define BALL_COLOR WHITE
#define BALL_SIZE  20
#define BALL_SPEED 3
struct Ball
    speed_x int
    speed_y int 
    x int y int
end

var ball Ball

var difficulty int = 2

#define WINDOW_NAME   "Gofra Pong"
#define WINDOW_WIDTH  1200
#define WINDOW_HEIGHT 800
#define WINDOW_FPS    60

#define FONT_SIZE 80
#define BACKGROUND_COLOR BLACK

var enemy_score_str  char[32]
var player_score_str char[32]

inline func void update_ball_movement[]
    ball.x copy ?> ball.speed_x ?> + !<
    ball.y copy ?> ball.speed_y ?> + !<
end

inline func void finalize_game[]
    CloseWindow
    0 exit
end

inline func void increase_score[*int]
    copy ?> 1 + !<

    difficulty copy ?> 1 + !<
end

inline func void inverse_speed[*int]
    copy ?> -1 * !<
end

func void update_difficulty[]
    ball.speed_x BALL_SPEED difficulty ?> + !<
    ball.speed_y BALL_SPEED difficulty ?> + !<

    enemy.speed PADDLE_DEFAULT_SPEED 2 / difficulty ?> + !<
end

func void init_game[]
    ball.x WINDOW_WIDTH  2 / BALL_SIZE - !<
    ball.y WINDOW_HEIGHT 2 / BALL_SIZE - !<

    player.score 0 !<
    enemy.score  0 !<

    ball.speed_x BALL_SPEED !<
    ball.speed_y BALL_SPEED !<

    player.x WINDOW_WIDTH PADDLE_WIDTH - 10 - !<
    player.y WINDOW_HEIGHT 2 / PADDLE_HEIGHT 2 / - !<
    player.speed PADDLE_DEFAULT_SPEED !<

    enemy.x 10 !<
    enemy.y WINDOW_HEIGHT 2 / PADDLE_HEIGHT 2 / - !<
    enemy.speed PADDLE_DEFAULT_SPEED !<

    call update_difficulty
end

func void init_raylib[]
     WINDOW_WIDTH
     WINDOW_HEIGHT
     WINDOW_NAME to_cstr_ptr
    call InitWindow

     WINDOW_FPS
    call SetTargetFPS
end

func void draw_game[]
     BACKGROUND_COLOR
    call ClearBackground

     enemy_score_str
     WINDOW_WIDTH 4 / 20 -
     20
     FONT_SIZE 
     WHITE
    call DrawText

     player_score_str
     WINDOW_WIDTH 4 / 20 - 3 *
     20
     FONT_SIZE 
     WHITE
    call DrawText

     WINDOW_WIDTH 2 / 
     0
     WINDOW_WIDTH 2 /
     WINDOW_HEIGHT
     WHITE
    call DrawLine

     ball.x ?> BALL_SIZE 2 / +
     ball.y ?> BALL_SIZE 2 / +
     BALL_SIZE
     BALL_SIZE
     BALL_COLOR
    call DrawRectangle

     player.x ?>
     player.y ?>
     PADDLE_WIDTH
     PADDLE_HEIGHT
     WHITE
    call DrawRectangle

     enemy.x ?>
     enemy.y ?>
     PADDLE_WIDTH
     PADDLE_HEIGHT
     WHITE
    call DrawRectangle

    0 0 call DrawFPS
end

func void handle_enemy_ai[]
    // Try to move to ball position
    enemy.y ?> ball.y ?> > if
        enemy.y copy ?> enemy.speed ?> - !<
    end

    enemy.y ?> ball.y ?> < if
        enemy.y copy ?> enemy.speed ?> + !<
    end

    // Boundaries for enemy paddle
    enemy.y ?> 0 < if
        enemy.y 0 !<
    end
    enemy.y ?> PADDLE_HEIGHT + WINDOW_HEIGHT > if
        enemy.y WINDOW_HEIGHT PADDLE_HEIGHT - !<
    end
end

func void handle_player_movement[]
    // Movement of an player paddle
    'W' IsKeyDown if
        player.y copy ?> player.speed ?> - !<
    end
    'S' IsKeyDown if
        player.y copy ?> player.speed ?> + !<
    end

    // Boundaries for player paddle
    player.y ?> 0 < if
        player.y 0 !<
    end
    
    player.y ?> PADDLE_HEIGHT + WINDOW_HEIGHT > if
        player.y WINDOW_HEIGHT PADDLE_HEIGHT - !<
    end
end

func void handle_ball_paddle_bounce[]
    ball.x ?> player.x ?> PADDLE_WIDTH - >= 
    ball.y ?> player.y ?> >=
    ball.y ?> player.y ?> PADDLE_HEIGHT + <= 
    && && if
        ball.speed_x call inverse_speed
        ball.speed_y call inverse_speed
    end

    ball.x ?> enemy.x ?> PADDLE_WIDTH + <=
    ball.y ?> enemy.y ?> >=
    ball.y ?> enemy.y ?> PADDLE_HEIGHT + <=
    && && if
        ball.speed_x call inverse_speed
        ball.speed_y call inverse_speed
    end
end

func void handle_ball_wall_bounce[]
    ball.x ?> BALL_SIZE 2 * + WINDOW_WIDTH >= if 
        // Bounce of right corner
        enemy.score call increase_score
        ball.speed_x call inverse_speed
    end

    ball.y ?> BALL_SIZE 2 * + WINDOW_HEIGHT >= if 
        // Bounce of bottom corner
        ball.speed_y call inverse_speed
    end
    ball.y ?> 0 <= if 
        // Bounce of top corner
        ball.speed_y call inverse_speed
    end

    ball.x ?> 0 <= if 
        // Bounce of left corner
        player.score call increase_score
        ball.speed_x call inverse_speed
    end
end

func void update_user_interface[]
    enemy.score ?> enemy_score_str call int2str
    player.score ?> player_score_str call int2str
end

func void game_loop[]
    call draw_game
    call handle_player_movement
    call handle_enemy_ai
    call update_ball_movement
    call handle_ball_wall_bounce
    call handle_ball_paddle_bounce
    call update_user_interface
end

func void main[]
    call init_game
    call init_raylib

    while call WindowShouldClose true != do 
        call BeginDrawing
        call game_loop
        call EndDrawing 
    end

    call finalize_game
end