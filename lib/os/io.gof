// ==============================================
// I/O (Input / Output) manipulations based on operating system (wrapper)
// ==============================================

#include "general.gof"
#include "string.gof"

// OS-dependant native abstraction layer
#ifdef OS_WINDOWS #include "os/native/windows.gof" #endif
#ifdef OS_DARWIN  #include "os/native/darwin.gof"  #endif
#ifdef OS_LINUX   #include "os/native/linux.gof"   #endif

// --- Default handles / file descriptors ---
// TODO: Add proper preprocessor conditions
#ifdef OS_WINDOWS
    #define STD_IN  STD_INPUT_HANDLE
    #define STD_OUT STD_OUTPUT_HANDLE
    #define STD_ERR STD_ERROR_HANDLE
#endif // OS_WINDOWS
#ifdef OS_DARWIN
    #define STD_IN  STD_IN_FD
    #define STD_OUT STD_OUT_FD
    #define STD_ERR STD_ERR_FD
#endif // OS_DARWIN
#ifdef OS_LINUX
    #define STD_IN  STD_IN_FD
    #define STD_OUT STD_OUT_FD
    #define STD_ERR STD_ERR_FD
#endif // OS_LINUX

// Print an string into given file descriptor / handle and return bytes written
#ifdef OS_DARWIN  inline func int print_fd[int,*char[],int] sc_write  end #endif
#ifdef OS_LINUX   inline func int print_fd[int,*char[],int] sc_write  end #endif
#ifdef OS_WINDOWS inline func int print_fd[int,*char[],int] win_write end #endif


// Print an string into standart console output stream
var print_length_temp int
func void print[*char[],int]
    print_length_temp swap !<
    STD_OUT swap
    print_length_temp ?>
    print_fd drop
end

// Print an string into standart console error stream
func void eprint[*char[],int]
    print_length_temp swap !<
    STD_ERR swap
    print_length_temp ?> 
    print_fd drop
end

// Print an string into standart error console stream and abort execution
func void eprint_fatal[*char[],int]
    "FATAL: " eprint
    eprint abort
end

// Print given number into given file descriptor / handle
// does not emit '\n' at the end
// negative numbers is not supported
var print_integer_buffer_temp int[128]
var print_integer_number_temp int
var print_integer_idx_temp int
var print_integer_fd_temp int
func void print_integer_fd[int,int]
    // TODO: negative numbers is not supported
    print_integer_number_temp swap !<
    print_integer_fd_temp swap !<


    print_integer_number_temp ?> 0 < if
        "print_integer_fd got negative number!\n" eprint_fatal
    end

    print_integer_number_temp ?> 0 == if
        // Straight zero
        print_integer_buffer_temp 0 + '0'  !<
        print_integer_buffer_temp 1 + '\n' !<

        print_integer_fd_temp ?> 
        print_integer_buffer_temp 
        2 print_fd drop
    end

    print_integer_idx_temp 0 !<
    
   
    while 
        print_integer_number_temp ?> 
        0 >
    do
        
        // Get last digit of an number
        print_integer_number_temp ?> 10 %

        // position to write at
        print_integer_buffer_temp print_integer_idx_temp ?> + 
        
        // Write digit as char
        swap 
        '0' + // `cast` to char (e.g digit + 48 => charcode) 
        !<
        
        // Shift number from right to left (drop last digit)
        print_integer_number_temp copy ?> 10 / !< 

        // Increment IDX
        print_integer_idx_temp copy ?> inc !<
    end

    // Number: 1234
    // Buffer [...]
    // After block above buffer will become: [4321]
    // we iterate from right to left so emitting an '1234' string
    while print_integer_idx_temp ?> 1 + 0 > do
        // Print current symbol one-by-one from right to left
        print_integer_fd_temp ?>
            print_integer_buffer_temp print_integer_idx_temp ?> + 
        1 print_fd drop

        // Decrement IDX
        print_integer_idx_temp copy ?> dec !<
    end
end

// Print given number into standart console output
// Emits '\n' at the end
// negative numbers is not supported
func void print_integer[int]
    STD_IN swap print_integer_fd
    "\n" print
end
