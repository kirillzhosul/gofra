// ==============================================
// I/O (Input / Output) manipulations based on operating system (wrapper)
// ==============================================

#include "general.gof"
#include "string.gof"

// OS-dependant native abstraction layer
#ifdef OS_WINDOWS #include "os/native/windows.gof" #endif
#ifdef OS_DARWIN  #include "os/native/darwin.gof"  #endif
#ifdef OS_LINUX   #include "os/native/linux.gof"   #endif

// --- Default handles / file descriptors ---
// TODO: Add proper preprocessor conditions
#ifdef OS_WINDOWS
    #define STD_IN  STD_INPUT_HANDLE
    #define STD_OUT STD_OUTPUT_HANDLE
    #define STD_ERR STD_ERROR_HANDLE
#endif // OS_WINDOWS
#ifdef OS_DARWIN
    #define STD_IN  STD_IN_FD
    #define STD_OUT STD_OUT_FD
    #define STD_ERR STD_ERR_FD
#endif // OS_DARWIN
#ifdef OS_LINUX
    #define STD_IN  STD_IN_FD
    #define STD_OUT STD_OUT_FD
    #define STD_ERR STD_ERR_FD
#endif // OS_LINUX

// Print an string into given file descriptor / handle and return bytes written
#ifdef OS_DARWIN  inline func int print_fd[int, *char[], int] sc_write  end #endif
#ifdef OS_LINUX   inline func int print_fd[int, *char[], int] sc_write  end #endif
#ifdef OS_WINDOWS inline func int print_fd[int, *char[], int] win_write end #endif

// Input a string from given file descriptor and returns number of bytes read
#ifdef OS_LINUX   inline func int input_fd[int, *char[], int] sc_read end #endif
#ifdef OS_DARWIN  inline func int input_fd[int, *char[], int] sc_read end #endif

// Consume all character bytes from input buffer (e.g `input_fd`)
// Use as safety method as reading and letting some character leak through 
func void input_exhaust_buffer[]
    var buffer char[1]

    &buffer[0] 'a' !<

    while 
        &buffer[0] ?> typecast int 
        '\n' typecast int 
        != 
    do
            STD_IN
            &buffer
            sizeof buffer
        call input_fd drop
    end
end

// Input a string from standard console input stream
// Safe to buffer overflows, as exhaust all remaining IO buffer
// unsafe to big buffers (TODO)
func void input[*char[], int]
    var len int; &len swap !<

    STD_IN swap
    &len ?>
    call input_fd drop

    // Safety mechanism:
    // exhaust leftover buffer after system IO read
    call input_exhaust_buffer
end

// Print an string into standard console output stream
func void print[*char[], int]
    var len int; &len swap !<

    STD_OUT swap
    &len ?>
    call print_fd drop
end

// Print an string into standard console with trailing newline
func void println[*char[], int]
    call print
    "\n" call print
end

// Print an string into standard console error stream
func void eprint[*char[], int]
    var len int; &len swap !<

    STD_ERR swap
    &len ?> 
    print_fd drop
end

// Print an string into standard error console stream and abort execution
func void eprint_fatal[*char[], int]
    "FATAL: " call eprint
    call eprint 
    call abort
end

// Print given number into given file descriptor / handle
// does not emit '\n' at the end
// negative numbers is not supported
var print_integer_fd_buffer int[64] // int32 TODO
func void print_integer_fd[int, int]
    var number int; &number swap !<
    var fd int; &fd swap !<
    var idx int = 0;

    &number ?> 0 < if
        // TODO: negative numbers is not supported
        "print_integer_fd got negative number!\n" eprint_fatal
    end

    &number ?> 0 == if
        // Straight zero
        &print_integer_fd_buffer 0 + '0'  !<
        &print_integer_fd_buffer 1 + '\n' !<

        &fd ?> 
        &print_integer_fd_buffer 
        2 call print_fd drop
    end


    while &number ?> 0 > do
        
        // Get last digit of an number
        &number ?> 10 %

        // position to write at
        &print_integer_fd_buffer &idx ?> + 
        
        // Write digit as char
        swap 
        '0' + // `cast` to char (e.g digit + 48 => char code) 
        !<
        
        // Shift number from right to left (drop last digit)
        &number copy ?> 10 / !< 

        // Increment IDX
        &idx copy ?> inc !<
    end

    // Number: 1234
    // Buffer [...]
    // After block above buffer will become: [4321]
    // we iterate from right to left so emitting an '1234' string
    while &idx ?> 1 + 0 > do
        // Print current symbol one-by-one from right to left
        &fd ?>
            &print_integer_fd_buffer &idx ?> + 
        1 call print_fd drop

        // Decrement IDX
        &idx copy ?> dec !<
    end

end

// Print given number into standard console output
// Emits '\n' at the end
// negative numbers is not supported
func void print_integer[int]
    STD_IN swap call print_integer_fd
    "\n" call print
end
