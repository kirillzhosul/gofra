// ==============================================
// Network (TCP/UDP) helpers and wrappers
// Caveats: Currently works only on Darwin!
// ==============================================
#include "os/general.gof"

#ifdef OS_DARWIN
    // System call wrappers
    inline func int net_socket[int, int, int]        call sc_socket end
    inline func int net_bind[int, *sockaddr_in, int] call sc_bind   end
    inline func int net_listen[int, int]             call sc_listen end
    inline func int net_accept[int, int, int]        call sc_accept end
    inline func int net_read[int, *char[], int]      call sc_read   end
    inline func int net_write[int, *char[], int]     call sc_write  end
    inline func int net_close[int]                   call sc_close  end

    // Accept without an client address - only server socket is required
    func int net_accept_sink[int] 0 0 call net_accept end

    // Create an IPv4 TCP socket
    func int net_ipv4_tcp_socket[]
        AF_INET 
        SOCK_STREAM 
        0 
        call net_socket
    end
#endif


// TODO: Add proper OR to preprocessor, must separate that from windows NET-code
#ifdef OS_LINUX
    // System call wrappers
    inline func int net_socket[int, int, int]        call sc_socket end
    inline func int net_bind[int, *sockaddr_in, int] call sc_bind   end
    inline func int net_listen[int, int]             call sc_listen end
    inline func int net_accept[int, int, int]        call sc_accept end
    inline func int net_read[int, *char[], int]      call sc_read   end
    inline func int net_write[int, *char[], int]     call sc_write  end
    inline func int net_close[int]                   call sc_close  end

    // Accept without an client address - only server socket is required
    func int net_accept_sink[int] 0 0 call net_accept end

    // Create an IPv4 TCP socket
    func int net_ipv4_tcp_socket[]
        AF_INET 
        SOCK_STREAM 
        0 
        call net_socket
    end
#endif